name: CSV File Validation (using python-oefdb-sdk)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [ 3.9.12 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
#      - name: Set up Python ${{ matrix.python }}
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python }}
      - name: Clone python-oefdb-sdk
        uses: actions/checkout@v2
        with:
          repository: climatiq/python-oefdb-sdk
          path: python-oefdb-sdk
          ssh-key: ${{ secrets.PYTHON_OEFDB_SDK_DEPLOY_PRIVATE_KEY }}
#      - name: Load cached Poetry installation
#        uses: actions/cache@v2
#        with:
#          path: ~/.local
#          key: poetry-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('.github/workflows/validate-using-python-oefdb-sdk.yaml') }}
#      - name: Install Poetry
#        uses: snok/install-poetry@v1
#        with:
#          version: 1.1.13
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#      - name: Load cached venv
#        id: cached-poetry-dependencies
#        uses: actions/cache@v2
#        with:
#          path: python-oefdb-sdk/.venv
#          key: venv-${{ runner.os }}-${{matrix.python}}-${{ hashFiles('.github/workflows/validate-using-python-oefdb-sdk.yaml') }}-${{ hashFiles('python-oefdb-sdk/pyproject.toml') }}
#      - name: Install dependencies
#        run: poetry install --no-dev
#        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#        working-directory: python-oefdb-sdk
#      - name: Validate OEFDB
#        run: poetry run oefdb_validate -i ../OpenEmissionFactorsDB.csv
#        working-directory: python-oefdb-sdk
      - name: Validate OEFDB schema
        if: always()
        id: schema_validation
        run: |
          poetry run oefdb_validate_schema --fix -i ../OpenEmissionFactorsDB.csv -s ../metadata/schema.toml 2>&1 | tee test.log
          result_code=${PIPESTATUS[0]}
          echo "::set-output name=cli_output::$(cat test.log)"
          exit $result_code
        working-directory: python-oefdb-sdk

      - name: 'Write comment that explains formatting'
        #if: steps.auto-commit-action.outputs.changes_detected == 'true'
        uses: actions/github-script@v5
        if: always()
        with:
            github-token: ${{secrets.GITHUB_TOKEN}}
            script: |
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: 'The SDK autofixer has encountered something it could fix automatically. \n It has automatically fixed some lines and pushed a new commit to your branch. \n ${{steps.schema_validation.outputs.cli_output}} \n  Please inspect the output below, and pull down the latest commit to ensure that everything looks right. \n ```\n ${{steps.schema_validation.outputs.cli_output}} \n```'
                })