name: CSV File Validation (using python-oefdb-sdk)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  validate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [ 3.9.12 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Clone python-oefdb-sdk
        uses: actions/checkout@v2
        with:
          repository: climatiq/python-oefdb-sdk
          path: python-oefdb-sdk
          ssh-key: ${{ secrets.PYTHON_OEFDB_SDK_DEPLOY_PRIVATE_KEY }}
      - name: Load cached Poetry installation
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('.github/workflows/validate-using-python-oefdb-sdk.yaml') }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.13
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: python-oefdb-sdk/.venv
          key: venv-${{ runner.os }}-${{matrix.python}}-${{ hashFiles('.github/workflows/validate-using-python-oefdb-sdk.yaml') }}-${{ hashFiles('python-oefdb-sdk/pyproject.toml') }}
      - name: Install dependencies
        run: poetry install --no-dev
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: python-oefdb-sdk
      - name: Validate OEFDB
        run: poetry run oefdb_validate -i ../OpenEmissionFactorsDB.csv
        working-directory: python-oefdb-sdk

      # This CI script validates and autofixes any issues in the OEFDB
      # It's unfortunately a big tangle of bash, as we want to capture the output and have it available later
      # and Github actions is surprisingly bad at that.
      - name: Validate OEFDB schema
        if: always() # Always attempt schema validation even if another validation fails
        id: schema_validation
        working-directory: python-oefdb-sdk
        run: |
          # See https://stackoverflow.com/a/66713349/8007580 for this solution that allows us to capture output while still failing
          # the entire CI run if an error occurs
          poetry run oefdb_validate_schema -i ../OpenEmissionFactorsDB.csv -s ../metadata/schema.toml --fix 2>&1 | tee test.log
          result_code=${PIPESTATUS[0]}
          
          # There is a limit to how much input we can pass into the comment action
          # So if we have too much output here we need to truncate it
          if [[ $(wc -l < test.log) -ge 100 ]]
          then
              START=$(cat "test.log" | head -n 50)
              END=$(cat "test.log" | tail -n 50)
              nl=$'\n' # We have to do this newline trick, otherwise the newlines are not escaped later for some reason
              RESULT="$START $nl ... MIDDLE OF OUTPUT TRUNCATED BECAUSE IT'S TOO LONG ...  $nl $END"
          else
              RESULT=$(cat test.log)
          fi
          
          # Github deals terribly with multiline strings.
          # So we have to replace them with escape chars here and then Github will automatically unescape
          # Otherwise we can only capture the first line of our string
          # see https://github.community/t/set-output-truncates-multiline-strings/16852/4
          RESULT="${RESULT//'%'/'%25'}"
          RESULT="${RESULT//$'\n'/'%0A'}"
          RESULT="${RESULT//$'\r'/'%0D'}"
          
          # Assign the modified result so it is accessible later
          echo "::set-output name=cli_output::$RESULT"
          # And then exit with the original exit code of the command
          exit $result_code

        # If autofix has changed some files, we commit them here
        # Note that this does not trigger an extra CI run. See https://github.com/stefanzweifel/git-auto-commit-action#commits-made-by-this-action-do-not-trigger-new-workflow-runs
      - name: Commits and pushes changed files
        if: always() # Previous step will fail if it still cannot validate after fixes - in that case we still want to commit the fixes
        id: auto-commit-action
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
            commit_message: 'Automatic fixes by the OEFDB validator'

      - name: 'Add comment to PR discussion thread'
        if: steps.auto-commit-action.outputs.changes_detected == 'true'
        uses: actions/github-script@v5
        with:
            github-token: ${{secrets.GITHUB_TOKEN}}
            script: |
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `# Automatic fix applied \n The OEFDB validator has encountered something it could fix automatically. \n It has automatically changed some lines and pushed a new commit to your branch. \n\n  Please inspect the output below, and run `git pull` to update your local branch if you want to keep working. \n \`\`\`\n ${{ steps.schema_validation.outputs.cli_output }} \n\`\`\``
                });
